{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","viewport","center","zoom","data","key","checkpoint","checkpointtype","direction","count","tags","d","index","topology","map","t","indexOf","Object","assign","position","this","lat","lng","markers","Fragment","augmentCheckpointData","Marker","Popup","id","class","Map","style","height","TileLayer","attribution","url","columns","dataSource","bordered","pagination","pageSize","showHeader","size","intervalId","setInterval","loadData","fetch","method","headers","then","response","json","setState","catch","error","alert","message","clearInterval","Component","title","dataIndex","width","sorter","a","b","length","sortDirections","filters","text","value","onFilter","record","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e81b2178.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Button from 'antd/es/button';\nimport './App.css';\nimport { Table, Divider, Tag } from 'antd';\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet'\n\n\nclass App extends Component {\n\t\n  augmentCheckpointData(d) {\n\t  const checkpointNames = topology.map((t) => { return t.checkpoint});\n\t  const index = checkpointNames.indexOf(d.checkpoint);\n\t  if (d.checkpointtype == 'crossing' && d.direction == 'in' && index >= 0) {\n\t\t  return Object.assign({}, d, topology[index]);\n\t  } else {\n\t\t  return null;\n\t  }\n  }\n\t\n  render() {\n\tconst position = [this.state.lat, this.state.lng]\n\t/*\t  \n\tfor(var i = 0; i < topology.length; i++) {\n\t    var chkname = topology[i].checkpoint;\n\t    \n\t    this.state.data.forEach(\n\t    \t\tfunction(obj) {\n\t    \t\t\tconsole.log(obj.checkpoint);\n\t    \t\t\tconsole.log(obj.checkpointtype);\n\t    \t\t\tconsole.log(obj.direction);\n\t    \t\t\tconsole.log(obj.count);\n\t    \t\t\t\n\t    \t\t\tif (chkname == obj.checkpoint && 'crossing' == obj.checkpointtype){\n\t    \t\t\t\talert (obj.checkpoint + \":\" + obj.count + \"-\" + obj.direction);\n\t    \t\t\t}\n\t    \t\t});\n\t}\n\t*/\t\n\tconst markers = (\n\t\t\t<React.Fragment>\n\t\t\t\t{this.state.data.map((d) => {\n\t\t\t\t\td = this.augmentCheckpointData(d);\n\t\t\t\t\tif (d) {\n\t\t\t\t\t\treturn <Marker position={[d.lat, d.lng]}>\n\t\t\t\t\t\t\t\t\t<Popup>{d.checkpoint}: {d.count} - {d.direction}</Popup>\n\t\t\t\t\t\t\t\t</Marker>;\t\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</React.Fragment>);\n\t\t\n    return (      \n      <div>\n\t      <div id=\"mapid\" class=\"divmapclass\">\n\t\t      <Map center={position} viewport={this.state.viewport} style={{height : '500px'}}>\n\t\t      <TileLayer\n\t\t        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n\t\t        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n\t\t        \t{markers}\n\t\t      </Map>\n\t      </div>\n\t     <div id=\"tableid\" class=\"divtableclass\"> \n\t     \t<Table columns={columns} dataSource={this.state.data} bordered=\"true\" pagination={{pageSize: 20}} showHeader=\"true\" size=\"small\" />\n\t     {/* todo */} \n\t     </div>\n      </div>\n\n    );\n  } // end render()\n  \n  \n  \n  componentDidMount() {\t  \n\t  this.intervalId = setInterval(\n\t\t\t  () => this.loadData(),\n\t\t\t  60000\n\t\t\t  );\n\t  this.loadData(); // also load one immediately\n  }  \n  \n  loadData(){\n\t  fetch('http://ac-node-nr-consumer-ac-project.192.168.202.24.nip.io/api/v2/status',\n\t    {\n\t        method: 'GET',\n\t        //body: JSON.stringify(body), //eventuale json in body\n\t        headers: {\n\t            \"Content-Type\": \"application/json; charset=utf-8\",\n\t\t\t\t\"Authorization\": \"Bearer 1234567890\",\n\t\t\t\t\"Accept\":\"application/json\"\n\t\t\t},\n\t    })\n\t    .then(response => response.json()).then(\n\t    \t\t(json) => {\n\t    \t\t\t\t\tthis.setState({ data: json });\n\t    \t\t\t\t\t}).catch(\n\t    \t\t\t\t\t\t\t(error) => alert(error.message)\n\t    \t\t\t\t\t);\n\t  \n  }\n  \n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n  \n  state = {\n\t\t  //lat: 40.751210, \n\t\t  //lng: 14.488297,\n\t\t  //zoom: 16,\n\t\t  viewport: {\n\t\t\t  center: [40.751210, 14.488297],\n\t\t\t  zoom: 16,\n\t\t\t},\n\t\t  data: [\n\t\t    {\n\t\t      key: '1',\n\t\t      checkpoint: 'PortaMarina',\t\t      \n\t\t      checkpointtype: 'crossing',\n\t\t      direction: 'in',\n\t\t\t  count: 12,\n\t\t      tags: ['nice', 'developer'],\n\t\t    },\n\t\t    {\n\t\t      key: '2',\n\t\t      checkpoint: 'Anfiteatro',\n\t\t      checkpointtype: 'crossing',\n\t\t      direction: 'out',\n\t\t\t  count: 8,\n\t\t      tags: ['loser'],\n\t\t    },\n\t\t    {\n\t\t      key: '3',\n\t\t      checkpoint: 'Foro',\n\t\t      checkpointtype: 'crossing',\n\t\t      direction: 'in',\n\t\t\t  count: 10,\n\t\t      tags: ['cool', 'teacher'],\n\t\t    },\n\t\t  ]\n  };\n  \n  \n} // end class component\n\n\n\n\n\nconst topology = [\n\t  {\n\t    checkpoint: 'Anfiteatro',\n\t    lat: 40.750984,\n\t\tlng: 14.494694\n\t  },\n\t  {\n\t\tcheckpoint: 'PortaMarina',\n\t\tlat: 40.7484834,\n\t\tlng: 14.4830869\n\t  },\n\t  {\n\t\tcheckpoint: 'Foro',\n\t    lat: 40.7491175,\n\t\tlng: 14.4845247\n\t  }\n\t]\n\n\nconst columns = [\n  {\n    title: 'Checkpoint',\n    dataIndex: 'checkpoint',\n    key: 'checkpoint',\n\twidth: 150,\n\tsorter: (a, b) => a.checkpoint.length - b.checkpoint.length,\n\tsortDirections: ['ascend']\t    \n  },\n  {\n    title: 'CheckpointType',\n    dataIndex: 'checkpointtype',\n    key: 'checkpointtype',\n\twidth: 200,\n\t  filters: [\n\t        {\n\t          text: 'crossing',\n\t          value: 'crossing',\n\t        },\n\t        {\n\t          text: 'baggage-drop',\n\t          value: 'baggage-drop',\n\t        }\n\t      ],\n\t      // specify the condition of filtering result\n\t      // here is that finding the name started with `value`\n\t      onFilter: (value, record) => record.checkpointtype.indexOf(value) === 0,\n\t      sorter: (a, b) => a.checkpointtype.length - b.checkpointtype.length,\n\t      sortDirections: ['ascend'],\n  },\n  {\n    title: 'Direction',\n    dataIndex: 'direction',\n    key: 'direction',\n\t  width: 80\n  },\n  {\n    title: 'Count',\n    dataIndex: 'count',\n    key: 'count',\n\t  width: 80 ,\n    render: text => <b>{text}</b>\n  },\n  {\n    title: 'Time',\n    dataIndex: 'updatetime',\n    key: 'updatetime',\n\t   width: 200 ,\n  },\n  {\n    title: 'Other',\n    dataIndex: 'info',\n    key: 'info'\n  }\n  \n]\n\n\nconst DEFAULT_VIEWPORT = {\n\tcenter: [51.505, -0.09],\n\tzoom: 13\n}\n const MAPDIVSTYLE = {\n\theight: \"800px\",\n\twidth: \"90%\"\n}\n\nexport default App;\n\n//ReactDOM.render(<Table columns={columns} dataSource={data} />, mountNode);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}