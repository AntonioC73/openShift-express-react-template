{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","lat","lng","zoom","data","key","checkpoint","checkpointtype","direction","count","tags","position","this","markers","Fragment","map","d","x","Math","random","Marker","Popup","Map","center","TileLayer","attribution","url","columns","dataSource","bordered","pagination","pageSize","showHeader","size","loadData","fetch","method","headers","then","response","json","setState","catch","error","alert","message","clearInterval","intervalId","Component","title","dataIndex","width","sorter","a","b","length","sortDirections","filters","text","value","onFilter","record","indexOf","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6UAOMA,E,2MA2DJC,MAAQ,CACNC,IAAK,QACLC,IAAK,QACLC,KAAM,GACNC,KAAM,CACJ,CACEC,IAAK,IACLC,WAAY,cACZC,eAAgB,WAChBC,UAAW,KACdC,MAAO,GACJC,KAAM,CAAC,OAAQ,cAEjB,CACEL,IAAK,IACLC,WAAY,aACZC,eAAgB,WAChBC,UAAW,MACdC,MAAO,EACJC,KAAM,CAAC,UAET,CACEL,IAAK,IACLC,WAAY,OACZC,eAAgB,WAChBC,UAAW,KACdC,MAAO,GACJC,KAAM,CAAC,OAAQ,c,wEAlFtB,IAAMC,EAAW,CAACC,KAAKZ,MAAMC,IAAKW,KAAKZ,MAAME,KAEvCW,EAAW,kBAAC,IAAMC,SAAP,KAChBF,KAAKZ,MAAMI,KAAKW,KAAI,SAACC,GAErB,OADAA,EAAEL,SAAWA,EAASI,KAAI,SAACE,GAAM,OAAOA,EAAEC,KAAKC,SAAS,OAChD,kBAACC,EAAA,EAAD,CAAQT,SAAUK,EAAEL,UAAU,kBAACU,EAAA,EAAD,KAAQL,EAAEV,WAAV,KAAwBU,EAAEP,YAI9D,OACE,6BAEC,kBAACa,EAAA,EAAD,CAAKC,OAAQZ,EAAUR,KAAMS,KAAKZ,MAAMG,MACxC,kBAACqB,EAAA,EAAD,CACEC,YAAY,0EACZC,IAAI,uDACLb,GAIF,kBAAC,IAAD,CAAOc,QAASA,EAASC,WAAYhB,KAAKZ,MAAMI,KAAMyB,SAAS,OAAOC,WAAY,CAACC,SAAU,IAAKC,WAAW,OAAOC,KAAK,a,0CAW5HrB,KAAKsB,a,iCAGK,IAAD,OACTC,MAAM,4EACJ,CACIC,OAAQ,MAERC,QAAS,CACL,eAAgB,kCACzB,cAAiB,oBACjB,OAAS,sBAGPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAACE,GACvC,EAAKC,SAAS,CAAErC,KAAMoC,OACrBE,OAAM,SAACC,GAAD,OAAWC,MAAMD,EAAME,c,6CAKjCC,cAAclC,KAAKmC,gB,GAxDLC,aAgIZrB,EAAU,CACd,CACEsB,MAAO,aACPC,UAAW,aACX7C,IAAK,aACR8C,MAAO,IACPC,OAAQ,SAACC,EAAGC,GAAJ,OAAUD,EAAE/C,WAAWiD,OAASD,EAAEhD,WAAWiD,QACrDC,eAAgB,CAAC,WAEhB,CACEP,MAAO,iBACPC,UAAW,iBACX7C,IAAK,iBACR8C,MAAO,IACLM,QAAS,CACH,CACEC,KAAM,WACNC,MAAO,YAET,CACED,KAAM,eACNC,MAAO,iBAKXC,SAAU,SAACD,EAAOE,GAAR,OAA4D,IAAzCA,EAAOtD,eAAeuD,QAAQH,IAC3DP,OAAQ,SAACC,EAAGC,GAAJ,OAAUD,EAAE9C,eAAegD,OAASD,EAAE/C,eAAegD,QAC7DC,eAAgB,CAAC,WAEtB,CACEP,MAAO,YACPC,UAAW,YACX7C,IAAK,YACN8C,MAAO,IAER,CACEF,MAAO,QACPC,UAAW,QACX7C,IAAK,QACN8C,MAAO,GACNY,OAAQ,SAAAL,GAAI,OAAI,2BAAIA,KAEtB,CACET,MAAO,OACPC,UAAW,aACX7C,IAAK,aACL8C,MAAO,KAET,CACEF,MAAO,QACPC,UAAW,OACX7C,IAAK,SAKMN,ICpLKiE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OAAO,kBAAC,EAAD,MAASO,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,kB","file":"static/js/main.00034d9e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Button from 'antd/es/button';\nimport './App.css';\nimport { Table, Divider, Tag } from 'antd';\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet'\n\n\nclass App extends Component {\n\t\n  render() {\n\t  \n\tconst position = [this.state.lat, this.state.lng]\n\t\n\tconst markers = (<React.Fragment>\n\t{this.state.data.map((d) => {\n\t\td.position = position.map((x)=>{ return x+Math.random()/100});\n\t\treturn (<Marker position={d.position}><Popup>{d.checkpoint}: {d.count}</Popup></Marker>);\n\t})}\n\t</React.Fragment>);\n\t\n    return (      \n      <div>\n\t     \n\t      <Map center={position} zoom={this.state.zoom}>\n\t      <TileLayer\n\t        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n\t        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n\t      {markers}\n\t      </Map>\n\t      \n\t     \n\t     <Table columns={columns} dataSource={this.state.data} bordered=\"true\" pagination={{pageSize: 20}} showHeader=\"true\" size=\"small\" />\n\t     {/* todo */}\n      </div>\n\n    );\n  }\n  \n  \n  \n  componentDidMount() {\t  \n\t  //this.intervalId = setInterval(() => this.loadData(), 60000);\n\t  this.loadData(); // also load one immediately\n  }  \n  \n  loadData(){\n\t  fetch('http://ac-node-nr-consumer-ac-project.192.168.202.24.nip.io/api/v2/status',\n\t    {\n\t        method: 'GET',\n\t        //body: JSON.stringify(body), //eventuale json in body\n\t        headers: {\n\t            \"Content-Type\": \"application/json; charset=utf-8\",\n\t\t\t\t\"Authorization\": \"Bearer 1234567890\",\n\t\t\t\t\"Accept\":\"application/json\"\n\t\t\t},\n\t    })\n\t    .then(response => response.json()).then((json) => {\n\t      this.setState({ data: json });\n\t    }).catch((error) => alert(error.message));\n\t  \n  }\n  \n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n  \n  state = {\n\t\t  lat: 40.7462,\n\t\t  lng: 14.4989,\n\t\t  zoom: 17,\n\t\t  data: [\n\t\t    {\n\t\t      key: '1',\n\t\t      checkpoint: 'PortaMarina',\t\t      \n\t\t      checkpointtype: 'crossing',\n\t\t      direction: 'in',\n\t\t\t  count: 12,\n\t\t      tags: ['nice', 'developer'],\n\t\t    },\n\t\t    {\n\t\t      key: '2',\n\t\t      checkpoint: 'Anfiteatro',\n\t\t      checkpointtype: 'crossing',\n\t\t      direction: 'out',\n\t\t\t  count: 8,\n\t\t      tags: ['loser'],\n\t\t    },\n\t\t    {\n\t\t      key: '3',\n\t\t      checkpoint: 'Foro',\n\t\t      checkpointtype: 'crossing',\n\t\t      direction: 'in',\n\t\t\t  count: 10,\n\t\t      tags: ['cool', 'teacher'],\n\t\t    },\n\t\t  ]\n  };\n  \n  \n}\n\n/*\nconst map = (\n  <Map center={position} zoom={13}>\n    <TileLayer\n      url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n    />\n    <Marker position={position}>\n      <Popup>A pretty CSS3 popup.<br />Easily customizable.</Popup>\n    </Marker>\n  </Map>\n)\n\n\nfunction loadMap(lon,lat) {\n    var mymap = L.map('mapid',{ zoomControl: false }).setView([lat,lon], 5);\n    L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {\n    attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n    maxZoom: 18,\n    id: 'mapbox/streets-v11',\n    accessToken: 'pk.eyJ1IjoiZ2lvdmFubmlzYXZpbm8iLCJhIjoiY2szaXNlZ3E2MGJwejNla29pamZnbHVrNCJ9.REZ-VTJD_It3Svl_1iMXhQ'\n}).addTo(mymap);\n    mymap.dragging.disable();\n    mymap.touchZoom.disable();\n    mymap.doubleClickZoom.disable();\n    mymap.scrollWheelZoom.disable();\n    var marker = L.marker([lat,lon]).addTo(mymap);\n    // var popup = L.popup()\n    //  .setLatLng([lat, lon])\n    //  .setContent(\"Your ISP is here!\")\n    //  .openOn(mymap);\n}\n*/\n\nconst columns = [\n  {\n    title: 'Checkpoint',\n    dataIndex: 'checkpoint',\n    key: 'checkpoint',\n\twidth: 150,\n\tsorter: (a, b) => a.checkpoint.length - b.checkpoint.length,\n\tsortDirections: ['ascend']\t    \n  },\n  {\n    title: 'CheckpointType',\n    dataIndex: 'checkpointtype',\n    key: 'checkpointtype',\n\twidth: 200,\n\t  filters: [\n\t        {\n\t          text: 'crossing',\n\t          value: 'crossing',\n\t        },\n\t        {\n\t          text: 'baggage-drop',\n\t          value: 'baggage-drop',\n\t        }\n\t      ],\n\t      // specify the condition of filtering result\n\t      // here is that finding the name started with `value`\n\t      onFilter: (value, record) => record.checkpointtype.indexOf(value) === 0,\n\t      sorter: (a, b) => a.checkpointtype.length - b.checkpointtype.length,\n\t      sortDirections: ['ascend'],\n  },\n  {\n    title: 'Direction',\n    dataIndex: 'direction',\n    key: 'direction',\n\t  width: 80\n  },\n  {\n    title: 'Count',\n    dataIndex: 'count',\n    key: 'count',\n\t  width: 80 ,\n    render: text => <b>{text}</b>\n  },\n  {\n    title: 'Time',\n    dataIndex: 'updatetime',\n    key: 'updatetime',\n\t   width: 200 ,\n  },\n  {\n    title: 'Other',\n    dataIndex: 'info',\n    key: 'info'\n  }\n  \n]\n\nexport default App;\n\n//ReactDOM.render(<Table columns={columns} dataSource={data} />, mountNode);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}